* The Rust Programming Language

** Understanding Ownership

Rust’s central feature is ownership. Although the feature is straightforward to
explain, it has deep implications for the rest of the language.

All data stored on the stack must have a known, fixed size.

Data with an unknown size at compile time or a size that might change must be
stored on the heap instead.

The heap is less organized: when you put data on the heap, you request a certain
amount of space. The operating system finds an empty spot in the heap that is
big enough, marks it as being in use, and returns a pointer, which is the
address of that location.

This process is called allocating on the heap and is sometimes abbreviated as
just allocating.

Pushing values onto the stack is not considered allocating.

Pushing to the stack is faster than allocating on the heap because the operating
system never has to search for a place to store new data;

Accessing data in the heap is slower than accessing data on the stack because
you have to follow a pointer to get there.

*Ownership Rules*:

- Each value in Rust has a variable that’s called its owner.
- There can only be one owner at a time.
- When the owner goes out of scope, the value will be dropped.

Rust will never automatically create “deep” copies of your data.

If we do want to deeply copy the heap data of the String, not just the stack
data, we can use a common method called `clone`.

We call having references as function parameters borrowing.

** Enums and Pattern Matching

Enums are a feature in many languages, but their capabilities differ in each
language. Rust’s enums are most similar to algebraic data types in functional
languages, such as F#, OCaml, and Haskell.

Rust doesn’t have the null feature that many other languages have.

Rust does not have nulls, but it has an enum that can encode the concept of a
value being present or absent. This enum is `Option<T>`.

The power of match comes from the expressiveness of the patterns and the fact
that the compiler confirms that all possible cases are handled.

** Error handling

Rust doesn’t have exceptions. Instead, it has the type `Result<T, E>` for
recoverable errors and the `panic!` macro that stops execution when the program
encounters an unrecoverable error.

** Generic Types, Traits and Lifetime

Traits are similar to a feature often called interfaces in other languages,
although with some differences.

We can implement a trait on a type only if either the trait or the type is local
to our crate. This rule ensures that other people’s code can’t break your code
and vice versa.

** Writing Automated Tests

In his 1972 essay “The Humble Programmer,” Edsger W. Dijkstra said that “Program
testing can be a very effective way to show the presence of bugs, but it is
hopelessly inadequate for showing their absence.”

Rust’s speed, safety, single binary output, and cross-platform support make it
an ideal language for creating command line tools

** Functional Language Features: Iterators and Closures

Iterators are one of Rust’s zero-cost abstractions, by which we mean using the
abstraction imposes no additional runtime overhead.

In general, Rust implementations obey the zero-overhead principle: What you
don’t use, you don’t pay for. And further: What you do use, you couldn’t hand
code any better.

** More about Cargo and Crates.io

Documentation comments use three slashes, ///, instead of two and support
Markdown notation for formatting the text.

`cargo doc --open` will build the HTML for your current crate’s documentation
(as well as the documentation for all of your crate’s dependencies) and open the
result in a web browser.

Cargo offers a feature called workspaces that can help manage multiple related
packages that are developed in tandem.

If a binary in your `$PATH` is named `cargo-something`, you can run it as if it
was a Cargo subcommand by running `cargo something`

** Fearless Concurrency

Handling concurrent programming safely and efficiently is another of Rust’s
major goals.

Many languages are dogmatic about the solutions they offer for handling
concurrent problems. For example, Erlang has elegant functionality for
message-passing concurrency but has only obscure ways to share state between
threads.

In most current operating systems, an executed program’s code is run in a
process, and the operating system manages multiple processes at once. Within
your program, you can also have independent parts that run simultaneously. The
features that run these independent parts are called threads.

This model where a language calls the operating system APIs to create threads is
sometimes called 1:1, meaning one operating system thread per one language
thread.

Many programming languages provide their own special implementation of threads.

Programming language-provided threads are known as green threads, and languages
that use these green threads will execute them in the context of a different
number of operating system threads.

For this reason, the green-threaded model is called the M:N model: there are M
green threads per N operating system threads.

Every non-assembly language will have some amount of runtime code.

Rust needs to have nearly no runtime and cannot compromise on being able to call
into C to maintain performance.

The green-threading M:N model requires a larger language runtime to manage
threads. As such, the Rust standard library only provides an implementation of
1:1 threading.

There are crates that implement M:N threading.

One increasingly popular approach to ensuring safe concurrency is message
passing, where threads or actors communicate by sending each other messages
containing data.

One major tool Rust has for accomplishing message-sending concurrency is the
channel.

The ownership rules play a vital role in message sending because they help you
write safe, concurrent code.

In a way, channels in any programming language are similar to single ownership,
because once you transfer a value down a channel, you should no longer use that
value.

Shared memory concurrency is like multiple ownership: multiple threads can
access the same memory location at the same time.

Management of mutexes can be incredibly tricky to get right, which is why so
many people are enthusiastic about channels.

However, thanks to Rust’s type system and ownership rules, you can’t get locking
and unlocking wrong.

We don’t risk forgetting to release the lock and blocking the mutex from being
used by other threads because the lock release happens automatically.

Thread safety comes with a performance penalty that you only want to pay when
you really need to.

** Object Oriented Programming Features of Rust

The Gang of Four book defines OOP this way:

- Object-oriented programs are made up of objects. An object packages both data
  and the procedures that operate on that data. The procedures are typically
  called methods or operations.

Using this definition, Rust is object oriented: structs and enums have data, and
impl blocks provide methods on structs and enums.

If a language must have inheritance to be an object-oriented language, then Rust
is not one. There is no way to define a struct that inherits the parent struct’s
fields and method implementations.

You can share Rust code using default trait method implementations instead.

Inheritance has recently fallen out of favor as a programming design solution in
many programming languages.

On generics the compiler generates nongeneric implementations of functions and
methods for each concrete type that we use in place of a generic type
parameter. The code that results from monomorphization is doing static dispatch,
which is when the compiler knows what method you’re calling at compile time.

When we use trait objects, Rust must use dynamic dispatch.

There is a runtime cost when this lookup happens that doesn’t occur with static
dispatch.

Dynamic dispatch also prevents the compiler from choosing to inline a method’s
code, which in turn prevents some optimizations.

** Patterns and Matching

One requirement for match expressions is that they need to be exhaustive in the
sense that all possibilities for the value in the match expression must be
accounted for.

** Advanced Features

Rust has a keyword, `extern`, that facilitates the creation and use of a Foreign Function Interface (FFI).

Functions declared within `extern` blocks are always unsafe.

We can also use `extern` to create an interface that allows other languages to
call Rust functions.

Macros are a way of writing code that writes other code, which is known as
metaprogramming.

A function signature must declare the number and type of parameters the function
has. Macros, on the other hand, can take a variable number of parameters.

macros are expanded before the compiler interprets the meaning of the code, so a
macro can, for example, implement a trait on a given type. A function can’t,
because it gets called at runtime and a trait needs to be implemented at compile
time.

Macro definitions are more complex, generally more difficult to read,
understand, and maintain.

You must define macros or bring them into scope before you call them in a file.

There is a book specifically about macros.

** Other

Rust is a statically typed language, which means that it must know the types of
all variables at compile time.

It has type inference.

Unit tests generally are written in the same file that the code.

Managing lifecycle of variables brings an additional complexity, Rusts memory
safety is not for free.

There is not named parameters, a common alternative is using structs.

Compiler error messages are excelent, practically a documentation explaining
where is the error and what to do for fixing it.

** Links

- https://doc.rust-lang.org/rust-by-example/
- https://danielkeep.github.io/tlborm/book/
- https://doc.rust-lang.org/nomicon/
- https://rustc-dev-guide.rust-lang.org/
- https://www.cs.utexas.edu/~EWD/transcriptions/EWD03xx/EWD340.html
- https://youtu.be/YYkOWzrO3xg
- https://gill.net.in/posts/auth-microservice-rust-actix-web1.0-diesel-complete-tutorial/
