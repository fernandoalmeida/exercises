* Introduction and System overview

  *CFEngine* is a distributed system for *managing* and *monitoring* computers
  across an IT network.

  *Machines* on the network that have CFEngine installed, and have *registered
  themselves* with a *policy server*, will each be running a set of CFEngine
  component applications that manage and interpret textual files called
  policies.

  *Policy files* themselves contain sets of *instructions* to ensure machines on
  the network are in full compliance with a *defined state*.

  At the *atomic level* are sets, or *bundles*, of what are known in the
  CFEngine world as *Promises*. Promises are at the heart of *Promise Theory*,
  which is in turn what CFEngine is all about.

  Every *statement* in CFEngine is a promise to be kept at some time or
  location. It is continuously verified and maintained. It is not a one-off
  operation, but a self-repairing process should anything deviate from the
  policy.

  If the actual state of a system is not in compliance with the predefined
  desired state, CFEngine will bring it into compliance. This is known as
  *convergence*.

  That model is represented using the *declarative* CFEngine policy language. The
  policies are downloaded in all hosts from the policy server. Every host will
  interpret and execute each *instruction* in a predetermined *order*.

  CFEngine continually *monitors* all of the hosts in real-time, and
  automatically *correct* them to bring everything back into compliance if
  necessary.

  There are basically two categories of machines in a CFEngine environment:
  policy servers and their client hosts.

  Hosts are responsible for ensuring they continuously pull the latest policies,
  from the policy server. They are additionally responsible for ensuring they
  remain fully compliant with the instructions contained within the policy
  files, at all times.

  All CFEngine software *components* exist in */var/cfengine/bin*.

  *cf-execd* is the scheduling daemon, similar to cron. It executes and collects
  the output of *cf-agent*.

  *cf-serverd* is a socket listening daemon providing two services: it acts as a
  *file server* for remote file copying and allows an authorized *cf-runagent*
  to start a cf-agent run.

  *cf-monitord* is the monitoring daemon for CFEngine.

  *cf-agent* evaluates policy code and makes changes to the system. Everything
  that happens on a client machine happens because of cf-agent. The agent is
  the part of CFEngine that manipulates system resources.

  *cf-key* is the CFEngine key generator makes key pairs for remote
  authentication.

  *cf-promises* is CFEngine's promise verifier. It is used to run a *pre-check*
  of policy code before cf-agent attempts to execute.

  *cf-runagent* is a helper program that can be used to run cf-agent on a number
  of remote hosts. It can be used to trigger an immediate deployment of new
  policy, if their existing policy includes that they check for updates.

* CFEngine Architecture and Design

  CFEngine *operates autonomously* in a network, under your guidance, it
  supports anything *from 1 to 100,000+ servers*, was designed to enable
  *scalable configuration management* in any kind of environment, with an
  emphasis on supporting large, Unix-like systems that are connected via TCP/IP.

  It doesn't depend on or assume the presence of reliable infrastructure, works
  opportunistically in any environment, using the fewest possible resources, and
  it has a limited set of software dependencies.

  A promise is the documentation of an intention to act or behave in some
  manner. When you make a promise, it is an effort to improve trust. Trust is an
  economic time-saver. If you can't trust you have to verify everything, and
  that is expensive.

  CFEngine is a system that *emphasizes the promises a client makes to the
  overall network*. They are the rules which *clients are responsible* for
  implementing. We can create large systems of scale because *we don't create a
  bulky centralized authority*. *There should be no single point-of-failure*
  when managing machines and people.

  Combining promises with *patterns to describe where and when promises should
  apply* is what CFEngine is all about.

  There are four commonly cited *phases* in managing systems with CFEngine:
  - *build* (template of proposed promises)
  - *deploy* (implementing the policy that was already decided)
  - *manage* (dealing with rare events that cannot be dealt with automatically)
  - *audit* (audits the system to determine what actually happened)

  You publish policy revisions, *always moving forward*, *without reverse them
  in case of error*. All of the desired-state changes are managed locally by
  each individual host, and *continuously repaired* to ensure on-going
  compliance with policy.

* Directory Structure

  The CFEngine application is fully contained within the */var/cfengine*
  directory tree.

  - *bin*
    agents cf-{agent,key,promises,runagent,twin}
    daemons cf-{execd,monitord,serverd,consumer,hub})
  - *modules*
    scripts used in commands promises
  - *inputs*
    cached policy repository (used by cf-agent)
  - *masterfiles*
    policy repository for access control (doesn't run directly by cf-agent)
    policies obtained from masterfiles are cached in inputs for execution
  - *output*
    spooled run-reports
  - *reports*
  - *state*
  - *plugins*

  CFEngine writes numerous logs and records to its private workspace:

  - *cf3.[hostname].runlog*
  - *cfagent.[hostname].log* (deprecated)
  - *cfagent.[hostname].log*

  Database files:

  - *cf_classes.lmdb*
    classes that have been defined on the current host
    includes their relative frequencies, scaled like a probability
  - *cf_lastseen.lmdb*
    hosts that last contacted this host, or were contacted by this host
  - *performance.lmdb*
    times of jobs
    longer tasks such as commands and file copying are measured by default

  Other files:

  - PIDs
    cf-{consumer,execd,hub,monitord,serverd}.pid
  - sockets
    cf-hub-local
  - data
    policy_server.dat
  - misc
    bin/{git,curl,openssl,rsync,psql,redis-cli}
