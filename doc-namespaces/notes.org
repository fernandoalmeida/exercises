* Namespaces

Namespaces are a Linux-specific feature.

A namespace wraps a global system resource in an abstraction that makes it
appear to the processes within the namespace that they have their own isolated
instance of the global resource.

Changes to the global resource are visible to other processes that are members
of the namespace, but are invisible to other processes.

One use of namespaces is to implement containers.

Linux provides the following namespaces:

- *IPC*       System V IPC, POSIX message queues
- *Network*   Network devices, stacks, ports, etc.
- *Mount*     Mount points
- *PID*       Process IDs
- *User*      User and group IDs
- *UTS*       Hostname and NIS domain name

Since Linux 3.8, no privilege is required to create a user namespace.

Each process has a */proc/[pid]/ns/* subdirectory containing one entry for each
namespace that supports being manipulated by *setns*:

#+begin_src shell-script
  ls -l /proc/$$/ns
#+end_src

The content of this symbolic link is a string containing the namespace type and
inode number:

#+begin_src shell-script
  readlink /proc/$$/ns/uts
  # uts:[4026531838]
#+end_src

** IPC namespace

   IPC namespaces isolate certain IPC resources, namely, *System V IPC* objects
   and *POSIX message queues*.

   Each IPC namespace has its own set of System V IPC identifiers and its own
   POSIX message queue filesystem..

   Requires a kernel that is configured with the *CONFIG_IPC_NS* option.

** Network namespace

   Network namespaces provide isolation of the system resources associated with
   networking: *network devices*, IPv4 and IPv6 protocol stacks, *IP routing
   tables*, *firewalls*, the */proc/net* directory, the */sys/class/net*
   directory, *port numbers* (*sockets*), and so on.

   A virtual network device (*veth*) pair provides a *pipe-like* abstraction
   that can be used *to create tunnels* between network namespaces, and can be
   used *to create a bridge* to a physical network device in another namespace.

   Requires a kernel that is configured with the *CONFIG_NET_NS* option.

** Mount namespace

   Mount namespaces isolate the set of *filesystem mount points*, meaning that
   processes in different mount namespaces can have different views of the
   *filesystem hierarchy*.

   The */proc/[pid]/mounts* file lists all the filesystems currently mounted in
   the process's mount namespace.  The format of this file is documented in
   *fstab*.

** PID namespace

   PID namespaces isolate the process ID number space, meaning that processes in
   different namespaces can have the same PID. It *allows containers* to provide
   functionality such as *suspending/resuming* the set of processes in the
   container and *migrating* the container to a new host while the processes
   inside the container maintain the same PIDs.

   PIDs start at 1 and calls to *fork*, *vfork* or *clone* will produce unique
   PIDs within the namespace.

   The first process created in a new namespace has the PID 1, and is the *init*
   process for the namespace. A child process that is orphaned within the
   namespace will be reparented to this process rather than init.

   If the init process of a PID namespace terminates, the kernel terminates all
   of the processes in the namespace via a *SIGKILL* signal.

   PID namespaces can be nested: each one has a parent, except for the initial
   (*root*).

   A process is *visible* only to processes contained in its own PID namespace
   and in descendants of that namespace. In this context, visible means that one
   process can be the target of operations by another process using *system
   calls* that specify a process ID.

   Calling *readlink* on the path */proc/self* yields the process ID of the
   caller in the namespace of the process that mounted the *procfs*.  This can
   be useful for introspection purposes, when a process wants to discover its
   PID in other namespaces.

   Requires a kernel that is configured with the *CONFIG_PID_NS* option.

** User namespace

   User namespaces isolate *security-related* identifiers and attributes, in
   particular, *user IDs* and *group IDs*, the *root directory*, *keys* and
   *capabilities*.

   A process's user and group IDs can be different inside and outside a user
   namespace. In other words, the process has full privileges for operations
   inside the user namespace, but is unprivileged for operations outside the
   namespace.

   User namespaces can be nested. The kernel imposes a *limit of 32 nested
   levels* of user namespaces.

   Each process is a member of exactly one user namespace.

   Starting in Linux 3.8, unprivileged processes can create user namespaces, the
   others depends on *CAP_SYS_ADMIN* capability.

   When a non-user-namespace is created, it is owned by the user namespace.
   Actions on the non-user-namespace require capabilities in the corresponding
   user namespace

   The */proc/[pid]/uid_map* and */proc/[pid]/gid_map* files expose the mappings
   for user and group IDs inside the user namespace for the process pid.

   Each line in the uid_map file specifies a 1-to-1 mapping of a range of
   contiguous user IDs between two user namespaces.

   #+begin_src shell-script
     cat /proc/$$/uid_map
     # =>  0 0 4294967295
   #+end_src

   This mapping tells us that the range starting at user ID 0 in this namespace
   maps to a range starting at 0 in the parent namespace, and the length of the
   range is the largest 32-bit unsigned integer.

   The */proc/[pid]/setgroups* file displays the string *"allow"* if processes
   in the user namespace that contains the process pid are permitted to employ
   the setgroups system call; it displays *"deny"* if setgroups is not permitted
   in that user namespace.

   If either the user or the group ID of the file has no mapping inside the
   namespace, the *set-user/group-ID* bit is silently ignored.

** UTS namespace

   UTS namespaces provide isolation of two system identifiers: the *hostname*
   and the *NIS* domain name.

   Requires a kernel that is configured with the *CONFIG_UTS_NS* option.
